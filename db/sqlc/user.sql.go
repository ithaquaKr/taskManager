// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hash_password,
    email,
    first_name,
    last_name,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6 
) RETURNING id, username, email, first_name, last_name, created_at, updated_at, hash_password
`

type CreateUserParams struct {
	Username     string       `json:"username"`
	HashPassword string       `json:"hash_password"`
	Email        string       `json:"email"`
	FirstName    string       `json:"first_name"`
	LastName     string       `json:"last_name"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashPassword,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashPassword,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, first_name, last_name, created_at, updated_at, hash_password FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashPassword,
	)
	return i, err
}
