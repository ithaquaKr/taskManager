// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: list.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createList = `-- name: CreateList :one
INSERT INTO lists (
    name,
    type,
    updated_at
) VALUES (
    $1, $2, $3
) RETURNING id, name, type, created_at, updated_at
`

type CreateListParams struct {
	Name      string       `json:"name"`
	Type      string       `json:"type"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, createList, arg.Name, arg.Type, arg.UpdatedAt)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getList = `-- name: GetList :one
SELECT id, name, type, created_at, updated_at FROM lists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetList(ctx context.Context, id uuid.UUID) (List, error) {
	row := q.db.QueryRowContext(ctx, getList, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listList = `-- name: ListList :many
SELECT id, name, type, created_at, updated_at FROM lists
WHERE id = $1 
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListListParams struct {
	ID     uuid.UUID `json:"id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListList(ctx context.Context, arg ListListParams) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, listList, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []List{}
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
