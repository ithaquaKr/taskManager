// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: note.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (
    list_id,
    title,
    content,
    reminder,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, list_id, title, content, reminder, created_at, updated_at
`

type CreateNoteParams struct {
	ListID    uuid.UUID      `json:"list_id"`
	Title     string         `json:"title"`
	Content   sql.NullString `json:"content"`
	Reminder  sql.NullTime   `json:"reminder"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote,
		arg.ListID,
		arg.Title,
		arg.Content,
		arg.Reminder,
		arg.UpdatedAt,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Title,
		&i.Content,
		&i.Reminder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNote = `-- name: GetNote :one
SELECT id, list_id, title, content, reminder, created_at, updated_at FROM notes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNote(ctx context.Context, id uuid.UUID) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Title,
		&i.Content,
		&i.Reminder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listNote = `-- name: ListNote :many
SELECT id, list_id, title, content, reminder, created_at, updated_at FROM notes
WHERE id = $1 
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListNoteParams struct {
	ID     uuid.UUID `json:"id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListNote(ctx context.Context, arg ListNoteParams) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNote, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Title,
			&i.Content,
			&i.Reminder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
