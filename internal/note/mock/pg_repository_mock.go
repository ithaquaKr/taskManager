// Code generated by MockGen. DO NOT EDIT.
// Source: internal/note/pg_repository.go
//
// Generated by this command:
//
//	mockgen -source internal/note/pg_repository.go -destination internal/note/mock/pg_repository_mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	entities "github.com/ithaquaKr/taskManager/internal/note/entities"
	utils "github.com/ithaquaKr/taskManager/pkg/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AllNotes mocks base method.
func (m *MockRepository) AllNotes(ctx context.Context, pq *utils.PaginationQuery) ([]*entities.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllNotes", ctx, pq)
	ret0, _ := ret[0].([]*entities.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllNotes indicates an expected call of AllNotes.
func (mr *MockRepositoryMockRecorder) AllNotes(ctx, pq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllNotes", reflect.TypeOf((*MockRepository)(nil).AllNotes), ctx, pq)
}

// CreateNote mocks base method.
func (m *MockRepository) CreateNote(ctx context.Context, note *entities.Note) (*entities.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", ctx, note)
	ret0, _ := ret[0].(*entities.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockRepositoryMockRecorder) CreateNote(ctx, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockRepository)(nil).CreateNote), ctx, note)
}

// DeleteNote mocks base method.
func (m *MockRepository) DeleteNote(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockRepositoryMockRecorder) DeleteNote(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockRepository)(nil).DeleteNote), ctx, id)
}

// GetNote mocks base method.
func (m *MockRepository) GetNote(ctx context.Context, id uuid.UUID) (*entities.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", ctx, id)
	ret0, _ := ret[0].(*entities.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockRepositoryMockRecorder) GetNote(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockRepository)(nil).GetNote), ctx, id)
}

// UpdateNote mocks base method.
func (m *MockRepository) UpdateNote(ctx context.Context, note *entities.Note) (*entities.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, note)
	ret0, _ := ret[0].(*entities.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockRepositoryMockRecorder) UpdateNote(ctx, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockRepository)(nil).UpdateNote), ctx, note)
}
